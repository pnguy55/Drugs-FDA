{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["semanticUI","generateData","apiData","numResults","total","parseInt","return_data","i","push","sponsor","sponsor_name","application_number","product","undefined","products","Set","map","element","brand_name","dosage_form","App","props","state","useApi","apiIdx","data","filterValue","perPage","showOnRowClick","changeOrder","orderedHeaders","hideUnordered","setNewData","bind","setApiData","changeData","handleOnChange","handleOnPerPage","handleCheckboxChange","onRowClick","handleOnChangeOrder","this","_this","axios","get","then","response","results","catch","error","console","log","setState","length","event","idx","row","preventDefault","stopPropagation","orgInd","_id","id","findIndex","splice","target","name","value","now","next","N","nextPos","newOrderedHeaders","mvElement","checked","rowData","rowIndex","tableData","Object","keys","key","window","alert","divider","style","display","margin","className","type","placeholder","onChange","width","header","marginBottom","marginRight","disabled","onClick","dataKey","sortable","withToggles","withLinks","withHeader","parseBool","yesWord","noWord","dynamic","emptyTable","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ec80027.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport SmartDataTable from 'react-smart-data-table'\r\nimport axios from 'axios'\r\n\r\n\r\nconst semanticUI = {\r\n    segment: 'ui segment',\r\n    message: 'ui message',\r\n    labeledInput: 'ui right labeled input',\r\n    iconInput: 'ui icon input',\r\n    searchIcon: 'search icon',\r\n    rowsIcon: 'numbered list icon',\r\n    table: 'ui compact selectable table',\r\n    select: 'ui dropdown',\r\n    refresh: 'ui labeled primary icon button',\r\n    refreshIcon: 'sync alternate icon',\r\n    change: 'ui labeled secondary icon button',\r\n    changeIcon: 'exchange icon',\r\n    checkbox: 'ui toggle checkbox',\r\n    loader: 'ui active text loader',\r\n    deleteIcon: 'trash red icon',\r\n  }\r\n\r\nconst generateData = (apiData, numResults) => {\r\n    let total = numResults || 0\r\n    if (typeof numResults === 'string') {\r\n      total = parseInt(numResults, 10)\r\n    }\r\n      \r\n    const return_data = []\r\n    for (let i = 0; i < total; i += 1) {\r\n      return_data.push({\r\n        sponsor: apiData[i].sponsor_name,\r\n        application_number: apiData[i].application_number,\r\n        product: apiData[i].products === undefined ? 'none' : `${[...new Set(apiData[i].products.map(element => {\r\n          return ` ${element.brand_name}(${element.dosage_form}) `\r\n        }))]}`,\r\n      })\r\n    }\r\n    return return_data\r\n  }\r\n\r\n  class App extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n        useApi: false,\r\n        apiData: '',\r\n        apiIdx: -1,\r\n        numResults: 0,\r\n        data: [],\r\n        filterValue: '',\r\n        perPage: 10,\r\n        showOnRowClick: true,\r\n        changeOrder: false,\r\n        orderedHeaders: [\r\n          'sponsor',\r\n          'application_number',\r\n          'product'\r\n          // 'email.address',\r\n          // 'phone_number',\r\n          // 'address.city',\r\n          // 'address.state',\r\n          // 'address.country',\r\n          // 'url',\r\n          // 'isMarried',\r\n        ],\r\n        hideUnordered: false,\r\n      }\r\n  \r\n      this.setNewData = this.setNewData.bind(this)\r\n      this.setApiData = this.setApiData.bind(this)\r\n      this.changeData = this.changeData.bind(this)\r\n      this.handleOnChange = this.handleOnChange.bind(this)\r\n      this.handleOnPerPage = this.handleOnPerPage.bind(this)\r\n      this.handleCheckboxChange = this.handleCheckboxChange.bind(this)\r\n      this.onRowClick = this.onRowClick.bind(this)\r\n      this.handleOnChangeOrder = this.handleOnChangeOrder.bind(this)\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const { numResults } = this.state\r\n      let _this = this;\r\n\r\n      axios.get('https://api.fda.gov/drug/drugsfda.json?limit=100')\r\n      .then(function (response) {\r\n        _this.setApiData(response.data.results)\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .then(function(){\r\n        console.log(_this.state.apiData);\r\n        _this.setNewData();\r\n      })\r\n\r\n\r\n\r\n    }\r\n  \r\n    setNewData() {\r\n      const { apiData, numResults } = this.state\r\n      this.setState({\r\n        data: generateData(apiData, numResults),\r\n      })\r\n    }\r\n  \r\n    setApiData(response) {\r\n      const apiData = response;\r\n      this.setState({ apiData, numResults: apiData.length })\r\n    }\r\n  \r\n    handleDelete(event, idx, row) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      const { data } = this.state\r\n      const { _id, id } = row\r\n      let orgInd\r\n      if (_id) orgInd = data.findIndex(({ _id: thisId }) => thisId === _id)\r\n      if (id) orgInd = data.findIndex(({ id: thisId }) => thisId === id)\r\n      data.splice(orgInd, 1)\r\n      this.setState({ data })\r\n    }\r\n  \r\n  \r\n    handleOnChange({ target: { name, value } }) {\r\n      this.setState({ [name]: value }, () => {\r\n        if (name === 'numResults') this.setNewData()\r\n      })\r\n    }\r\n  \r\n    handleOnChangeOrder(now, next) {\r\n      const { orderedHeaders } = this.state\r\n      const N = orderedHeaders.length\r\n      let nextPos = next\r\n      if (next < 0) {\r\n        nextPos = N\r\n      }\r\n      if (next >= N) {\r\n        nextPos = 0\r\n      }\r\n      const newOrderedHeaders = [...orderedHeaders]\r\n      const mvElement = newOrderedHeaders.splice(now, 1)[0]\r\n      newOrderedHeaders.splice(nextPos, 0, mvElement)\r\n      this.setState({ orderedHeaders: newOrderedHeaders })\r\n    }\r\n  \r\n    handleOnPerPage({ target: { name, value } }) {\r\n      this.setState({ [name]: parseInt(value, 10) })\r\n    }\r\n  \r\n    changeData() {\r\n      const { useApi } = this.state\r\n      this.setState({\r\n        useApi: !useApi,\r\n        filterValue: '',\r\n        perPage: 0,\r\n      })\r\n    }\r\n  \r\n    handleCheckboxChange({ target: { name, checked } }) {\r\n      this.setState({ [name]: checked })\r\n    }\r\n  \r\n    onRowClick(event, { rowData, rowIndex, tableData }) {\r\n      const { showOnRowClick } = this.state\r\n      if (showOnRowClick) {\r\n        const { sponsor } = rowData\r\n        let value = sponsor\r\n        if (!value) {\r\n          const [key] = Object.keys(rowData)\r\n          value = `Row number ${key}`\r\n        }\r\n        /* eslint-disable no-alert */\r\n        window.alert(`You clicked ${value}'s row !`)\r\n      } else {\r\n        // The following results should be identical\r\n        /* eslint-disable no-console */\r\n        console.log(rowData, tableData[rowIndex])\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      const {\r\n        useApi, apiData, data, filterValue, perPage, numResults, showOnRowClick,\r\n        changeOrder, orderedHeaders, hideUnordered,\r\n      } = this.state\r\n      const divider = <span style={{ display: 'inline-block', margin: '10px' }} />\r\n      return (\r\n        <>\r\n          <div className={semanticUI.segment}>\r\n            <div className={semanticUI.iconInput}>\r\n              <input\r\n                type='text'\r\n                name='filterValue'\r\n                value={filterValue}\r\n                placeholder='Filter results...'\r\n                onChange={this.handleOnChange}\r\n              />\r\n              <i className={semanticUI.searchIcon} />\r\n            </div>\r\n            {divider}\r\n            <select\r\n              name='perPage'\r\n              value={perPage}\r\n              className={semanticUI.select}\r\n              onChange={this.handleOnPerPage}\r\n            >\r\n              <option value='0'>\r\n                Per Page\r\n              </option>\r\n              <option value='10'>\r\n                10\r\n              </option>\r\n              <option value='25'>\r\n                25\r\n              </option>\r\n              <option value='50'>\r\n                50\r\n              </option>\r\n              <option value='100'>\r\n                100\r\n              </option>\r\n            </select>\r\n            {divider}\r\n            {!useApi && (\r\n              <span>\r\n                {divider}\r\n                <div className={semanticUI.iconInput}>\r\n                  <input\r\n                    type='text'\r\n                    name='numResults'\r\n                    value={numResults}\r\n                    placeholder='# Rows'\r\n                    onChange={this.handleOnChange}\r\n                    style={{ width: '80px' }}\r\n                  />\r\n                  <i className={semanticUI.rowsIcon} />\r\n                </div>\r\n              </span>\r\n            )}\r\n            {divider}\r\n            <div className={semanticUI.checkbox}>\r\n              <input\r\n                type='checkbox'\r\n                name='showOnRowClick'\r\n                onChange={this.handleCheckboxChange}\r\n                checked={showOnRowClick}\r\n              />\r\n              <label>\r\n                Show alert on row click\r\n              </label>\r\n            </div>\r\n            {divider}\r\n            <div className={semanticUI.checkbox}>\r\n              <input\r\n                type='checkbox'\r\n                name='changeOrder'\r\n                onChange={this.handleCheckboxChange}\r\n                checked={changeOrder}\r\n              />\r\n              <label>\r\n                Change header order\r\n              </label>\r\n            </div>\r\n          </div>\r\n          {changeOrder && (\r\n            <div className={semanticUI.segment}>\r\n              {orderedHeaders.map((header, idx) => (\r\n                <div key={header} style={{ marginBottom: '4px' }}>\r\n                  <div className={semanticUI.labeledInput} style={{ marginRight: '8px' }}>\r\n                    <input\r\n                      type='text'\r\n                      name={header}\r\n                      value={idx}\r\n                      placeholder='Index'\r\n                      style={{ width: '80px' }}\r\n                      disabled\r\n                    />\r\n                    <div className='ui label'>\r\n                      {header}\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => this.handleOnChangeOrder(idx, idx - 1)}\r\n                  >\r\n                    before\r\n                  </button>\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => this.handleOnChangeOrder(idx, idx + 1)}\r\n                  >\r\n                    after\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n          <div className={semanticUI.message}>\r\n            <p>\r\n              {useApi\r\n                ? 'While using async data, the state is controlled internally by the table'\r\n                : `Total rows in the table: ${data.length}`}\r\n            </p>\r\n          </div>\r\n          <SmartDataTable\r\n            data={useApi ? apiData : data}\r\n            dataKey=''\r\n            orderedHeaders={orderedHeaders}\r\n            hideUnordered={hideUnordered}\r\n            name='fda-table'\r\n            className={semanticUI.table}\r\n            filterValue={filterValue}\r\n            perPage={perPage}\r\n            sortable\r\n            withToggles\r\n            withLinks\r\n            withHeader\r\n            onRowClick={this.onRowClick}\r\n            parseBool={{\r\n              yesWord: 'Indeed',\r\n              noWord: 'Nope',\r\n            }}\r\n            dynamic\r\n            emptyTable={(\r\n              <div className={semanticUI.loader}>\r\n                Loading...\r\n              </div>\r\n            )}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n  }\r\n  \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}